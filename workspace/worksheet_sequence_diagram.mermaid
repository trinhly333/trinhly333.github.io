sequenceDiagram
    participant C as Customer
    participant UI as Frontend UI
    participant Auth as AuthService
    participant PS as ProductService
    participant Cart as ShoppingCart
    participant OS as OrderService
    participant PayS as PaymentService
    participant VQR as VietQRProvider
    participant Momo as MomoProvider
    participant ZP as ZaloPayProvider
    participant ES as EmailService
    participant DB as Supabase Database

    %% Homepage Loading and Product Browsing
    Note over C, DB: Customer Homepage Visit & Product Browsing

    C->>UI: Visit homepage (/)
    UI->>PS: getProductsWithCategories()
    PS->>DB: SELECT products, categories WHERE is_featured = true
    DB-->>PS: Return featured products and categories
    PS-->>UI: Return formatted product data
    UI->>PS: getFeaturedProducts()
    PS->>DB: SELECT * FROM products WHERE is_featured = true
    DB-->>PS: Return featured products
    PS-->>UI: Return featured products
    UI-->>C: Display homepage with featured products

    C->>UI: Search products ("tÃ¬m máº«u website")
    UI->>PS: searchProducts(query)
    PS->>DB: SELECT * FROM products WHERE name ILIKE '%query%' OR description ILIKE '%query%'
    DB-->>PS: Return matching products
    PS-->>UI: Return search results
    UI-->>C: Display filtered products

    %% Product Details and Cart Management
    Note over C, DB: Product Details Viewing & Cart Operations

    C->>UI: Click product card
    UI->>PS: getProductBySlug(slug)
    PS->>DB: SELECT p.*, pa.* FROM products p LEFT JOIN product_addons pa ON p.id = pa.product_id WHERE p.slug = $1
    DB-->>PS: Return product with addons
    PS-->>UI: Return complete product data
    UI-->>C: Display product details page

    C->>UI: Select addon checkboxes
    UI->>UI: calculatePrice(basePrice, selectedAddons)
    UI-->>C: Update price display dynamically

    C->>UI: Click "Add to Cart"
    UI->>Cart: addItem(productId, selectedAddons, quantity)
    Cart->>Cart: calculateTotals()
    Cart-->>UI: Return updated cart state
    UI-->>C: Show cart modal with updated items

    C->>UI: Update cart item quantity
    UI->>Cart: updateItemQuantity(productId, newQuantity)
    Cart->>Cart: calculateTotals()
    Cart-->>UI: Return updated cart totals
    UI-->>C: Display updated cart

    %% Checkout Process
    Note over C, DB: Checkout Flow & Order Creation

    C->>UI: Click "Checkout"
    UI->>Auth: getCurrentUser()
    Auth->>DB: SELECT * FROM auth.users WHERE id = $1
    DB-->>Auth: Return user data or null
    Auth-->>UI: Return authentication status

    alt Customer not authenticated
        UI->>Auth: signUp(email, password) / signIn(email, password)
        Auth->>DB: INSERT INTO auth.users / Authenticate user
        DB-->>Auth: Return user creation/login result
        Auth-->>UI: Return authentication result
    end

    UI->>UI: Display checkout form
    C->>UI: Fill customer details and select payment method

    C->>UI: Submit checkout form
    UI->>OS: createOrder(cartData, customerData, paymentMethod)
    OS->>DB: BEGIN TRANSACTION
    OS->>DB: INSERT INTO orders (customer_email, total_amount, payment_method, status)
    DB-->>OS: Return order_id
    
    loop For each cart item
        OS->>DB: INSERT INTO order_items (order_id, product_id, quantity, unit_price, selected_addons)
        DB-->>OS: Return order_item_id
    end
    
    OS->>DB: COMMIT TRANSACTION
    OS-->>UI: Return order object
    UI->>PayS: processPayment(orderId, paymentMethod)

    %% Payment Processing - VietQR Flow
    alt Payment Method is VietQR
        PayS->>VQR: createPayment(order)
        VQR->>VQR: generateQRCode(orderAmount, orderRef)
        VQR-->>PayS: Return QR code data
        PayS-->>UI: Return payment URL and QR code
        UI-->>C: Display QR code for scanning
        
        Note over C, VQR: Customer scans QR and pays via banking app
        
        VQR->>PayS: webhook(paymentConfirmation)
        PayS->>VQR: verifyPayment(transactionId)
        VQR-->>PayS: Return verification result
        PayS->>OS: updateOrderStatus(orderId, "paid")
        OS->>DB: UPDATE orders SET payment_status = 'completed', order_status = 'processing'
        DB-->>OS: Confirm update
        PayS->>ES: sendOrderConfirmation(order)
    end

    %% Payment Processing - Momo Flow
    alt Payment Method is Momo
        PayS->>Momo: createPayment(order)
        Momo->>Momo: generatePaymentURL(orderAmount, orderRef)
        Momo-->>PayS: Return payment URL
        PayS-->>UI: Return redirect URL
        UI-->>C: Redirect to Momo payment page
        
        Note over C, Momo: Customer completes payment on Momo
        
        Momo->>PayS: webhook(paymentResult)
        PayS->>Momo: verifyPayment(transactionId)
        Momo-->>PayS: Return verification result
        PayS->>OS: updateOrderStatus(orderId, "paid")
        OS->>DB: UPDATE orders SET payment_status = 'completed'
        DB-->>OS: Confirm update
        PayS->>ES: sendOrderConfirmation(order)
    end

    %% Payment Processing - ZaloPay Flow  
    alt Payment Method is ZaloPay
        PayS->>ZP: createPayment(order)
        ZP->>ZP: generatePaymentURL(orderAmount, orderRef)
        ZP-->>PayS: Return payment URL
        PayS-->>UI: Return redirect URL
        UI-->>C: Redirect to ZaloPay payment page
        
        Note over C, ZP: Customer completes payment on ZaloPay
        
        ZP->>PayS: webhook(paymentResult)
        PayS->>ZP: verifyPayment(transactionId)
        ZP-->>PayS: Return verification result
        PayS->>OS: updateOrderStatus(orderId, "paid")
        OS->>DB: UPDATE orders SET payment_status = 'completed'
        DB-->>OS: Confirm update
        PayS->>ES: sendOrderConfirmation(order)
    end

    %% Post-Payment Processing
    Note over C, DB: Order Fulfillment & Email Automation

    ES->>DB: SELECT email_templates WHERE type = 'order_confirmation'
    DB-->>ES: Return email template
    ES->>ES: renderTemplate(template, orderData)
    ES->>ES: sendEmail(customerEmail, renderedContent)
    ES-->>PayS: Email sent confirmation

    OS->>ES: scheduleEmailSequence(trigger: 'purchase_complete', customer)
    ES->>DB: INSERT INTO email_automations (customer_id, sequence_type, scheduled_at)
    DB-->>ES: Confirm automation scheduled

    UI-->>C: Redirect to thank you page (/thank-you)

    %% Admin Dashboard Operations
    Note over C, DB: Admin Dashboard Management

    participant A as Admin
    participant AUI as Admin UI
    participant APS as AdminProductService
    participant AOS as AdminOrderService
    participant ASS as AdminSettingsService

    A->>AUI: Login to admin dashboard
    AUI->>Auth: signIn(adminEmail, password)
    Auth->>DB: SELECT * FROM auth.users WHERE email = $1 AND role = 'admin'
    DB-->>Auth: Return admin user
    Auth-->>AUI: Return admin session
    
    A->>AUI: View dashboard metrics
    AUI->>AOS: getDashboardMetrics()
    AOS->>DB: SELECT COUNT(*) as total_orders, SUM(total_amount) as revenue FROM orders
    AOS->>DB: SELECT COUNT(*) as new_customers FROM auth.users WHERE created_at > NOW() - INTERVAL '30 days'
    DB-->>AOS: Return metrics data
    AOS-->>AUI: Return formatted metrics
    AUI-->>A: Display dashboard overview

    A->>AUI: Create new product
    AUI->>APS: createProduct(productData)
    APS->>DB: INSERT INTO products (name, description, price, thumbnail_url, video_url, gallery_urls)
    DB-->>APS: Return product_id
    
    loop For each addon
        APS->>DB: INSERT INTO product_addons (product_id, name, price)
        DB-->>APS: Return addon_id
    end
    
    APS-->>AUI: Return created product
    AUI-->>A: Display success message

    A->>AUI: Update site settings
    AUI->>ASS: updateSiteSettings(settingsData)
    ASS->>DB: UPDATE site_settings SET logo_url = $1, favicon_url = $2, contact_email = $3
    DB-->>ASS: Confirm settings update
    ASS-->>AUI: Return updated settings
    AUI-->>A: Display settings saved confirmation

    A->>AUI: View order details
    AUI->>AOS: getOrderById(orderId)
    AOS->>DB: SELECT o.*, oi.*, p.name as product_name FROM orders o JOIN order_items oi ON o.id = oi.order_id JOIN products p ON oi.product_id = p.id WHERE o.id = $1
    DB-->>AOS: Return complete order data
    AOS-->>AUI: Return formatted order details
    AUI-->>A: Display order information

    A->>AUI: Update order status
    AUI->>AOS: updateOrderStatus(orderId, newStatus)
    AOS->>DB: UPDATE orders SET order_status = $1 WHERE id = $2
    DB-->>AOS: Confirm status update
    AOS->>ES: sendStatusUpdateEmail(order, newStatus)
    ES-->>AOS: Email sent confirmation
    AOS-->>AUI: Return success
    AUI-->>A: Display status updated message